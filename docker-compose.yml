version: '3.8'
volumes:
  db_storage: null
  n8n_storage: null
  redis_storage: null
networks:
  n8n_net: null
  dokploy-network:
    external: true
x-shared:
  restart: always
  image: docker.n8n.io/n8nio/n8n:next
  environment: &ref_3
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_PORT=5678
  volumes: &ref_0
    - n8n_storage:/home/node/.n8n
  depends_on: &ref_1
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks: &ref_2
    - n8n_net
    - dokploy-network
services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_storage:/var/lib/postgresql/data
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n_net
  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      - redis_storage:/data
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n_net
  n8n:
    restart: always
    image: docker.n8n.io/n8nio/n8n:next
    pull_policy: always
    environment:
      - N8N_HOST=${N8N_DOMAIN:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_EDITOR_BASE_URL=https://${N8N_DOMAIN:-localhost}
      - N8N_PUBLIC_API_BASE_URL=https://${N8N_DOMAIN:-localhost}
    volumes: *ref_0
    depends_on: *ref_1
    networks: *ref_2
    ports:
      - ${N8N_EXPOSED_PORT:-5678}:5678
    labels:
      - traefik.http.routers.n8n-dev.rule=Host(`${N8N_DOMAIN}`)
      - traefik.http.routers.n8n-dev.entrypoints=web
      - traefik.http.services.n8n-dev.loadbalancer.server.port=5678
      - traefik.http.routers.n8n-dev.service=n8n-dev
      - traefik.http.routers.n8n-dev.middlewares=redirect-to-https@file
      - traefik.http.routers.n8n-devsecure.rule=Host(`${N8N_DOMAIN}`)
      - traefik.http.routers.n8n-devsecure.entrypoints=websecure
      - traefik.http.services.n8n-devsecure.loadbalancer.server.port=5678
      - traefik.http.routers.n8n-devsecure.service=n8n-devsecure
      - traefik.http.routers.n8n-devsecure.tls.certresolver=letsencrypt
      - traefik.enable=true
  n8n-worker:
    restart: always
    image: docker.n8n.io/n8nio/n8n:next
    pull_policy: always
    environment: *ref_3
    volumes: *ref_0
    depends_on: *ref_1
    networks: *ref_2
    command: worker
